{"version":3,"sources":["axios.js","Requests.js","Banner.js","Nav.js","Row.js","screens/HomeScreen.js","firebase.js","screens/SignupScreen.js","screens/LoginScreen.js","features/userSlice.js","screens/ProfileScreen.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","fetchTrailers","Banner","string","n","useState","movie","setMovie","useEffect","a","get","request","data","results","Math","floor","random","length","fetchData","console","log","className","style","backgroundImage","backdrop_path","backgroundPosition","title","name","original_name","overview","substr","Nav","show","handleShow","history","useHistory","transitionNavBar","window","scrollY","addEventListener","removeEventListener","onClick","push","src","alt","Row","fetchUrl","isLargeRow","movies","setMovies","setTrailer","map","poster_path","id","HomeScreen","auth","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","SignupScreen","emailRef","useRef","passwordRef","ref","type","placeholder","e","preventDefault","signInWithEmailAndPassword","current","value","then","authUser","catch","error","alert","mesage","createUserWithEmailAndPassword","message","LoginScreen","signIn","setSignIn","userSlice","createSlice","initialState","user","reducers","login","state","action","payload","logout","actions","selectUser","ProfileScreen","useSelector","email","signOut","App","dispatch","useDispatch","onAuthStateChanged","userAuth","uid","path","store","configureStore","reducer","userReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2ZAMeA,E,OAJEC,EAAMC,OAAO,CAC1BC,QAAS,iCCFPC,G,MAAU,oCAeDC,EAbE,CACbC,cAAc,8BAAD,OAAgCF,EAAhC,mBACbG,sBAAsB,wBAAD,OAA0BH,EAA1B,sBACrBI,cAAc,4BAAD,OAA8BJ,EAA9B,mBACbK,kBAAkB,2BAAD,OAA6BL,EAA7B,mBACjBM,kBAAkB,2BAAD,OAA6BN,EAA7B,mBACjBO,kBAAkB,2BAAD,OAA6BP,EAA7B,mBACjBQ,mBAAmB,2BAAD,OAA6BR,EAA7B,sBAClBS,mBAAmB,2BAAD,OAA6BT,EAA7B,mBAElBU,cAAc,mBAAD,OAAqBV,I,OCoCvBW,MA5Cf,WAEI,IAkBkBC,EAAQC,EAlB1B,EAA4BC,mBAAS,IAArC,mBAAQC,EAAR,KAAeC,EAAf,KAsBA,OApBAC,qBAAU,WAAM,4CACZ,4BAAAC,EAAA,sEAC0BrB,EAAMsB,IAAIlB,EAASE,uBAD7C,cACUiB,EADV,OAEIJ,EACII,EAAQC,KAAKC,QACTC,KAAKC,MAAMD,KAAKE,SAAWL,EAAQC,KAAKC,QAAQI,OAAS,KAJrE,kBAOWN,GAPX,4CADY,uBAAC,WAAD,wBAWZO,KACD,IAEHC,QAAQC,IAAId,GAOR,yBAAQe,UAAU,SAASC,MAAO,CAC9BC,gBAAgB,4CAAD,cAA8CjB,QAA9C,IAA8CA,OAA9C,EAA8CA,EAAOkB,cAArD,MACfC,mBAAoB,iBAFxB,UAII,sBAAKJ,UAAU,kBAAf,UACI,oBAAIA,UAAU,eAAd,UACU,OAALf,QAAK,IAALA,OAAA,EAAAA,EAAOoB,SAAP,OAAgBpB,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAOqB,QAAvB,OAA+BrB,QAA/B,IAA+BA,OAA/B,EAA+BA,EAAOsB,iBAE3C,sBAAKP,UAAU,iBAAf,UACI,wBAAQA,UAAU,gBAAlB,kBACA,wBAAQA,UAAU,gBAAlB,wBAEJ,oBAAIA,UAAU,qBAAd,UAjBMlB,EAiBsC,OAACG,QAAD,IAACA,OAAD,EAACA,EAAOuB,SAjBtCzB,EAiBiD,KAhB1D,OAAND,QAAM,IAANA,OAAA,EAAAA,EAAQc,QAASb,EAAID,EAAO2B,OAAO,EAAG1B,EAAE,GAAK,OAASD,QAkBzD,qBAAKkB,UAAU,uBAdnB,Q,qBCUOU,MApCf,WAEI,MAA2B1B,oBAAS,GAApC,mBAAO2B,EAAP,KAAaC,EAAb,KACMC,EAAUC,cAEVC,EAAmB,WAClBC,OAAOC,QAAU,IAChBL,GAAW,GAEXA,GAAW,IASnB,OALAzB,qBAAU,WAEN,OADA6B,OAAOE,iBAAiB,SAAUH,GAC3B,kBAAMC,OAAOG,oBAAoB,SAAUJ,MACnD,IAGC,qBAAKf,UAAS,cAASW,GAAQ,aAA/B,SAEI,sBAAKX,UAAU,eAAf,UACI,qBACAoB,QAAS,kBAAMP,EAAQQ,KAAK,MAC5BrB,UAAU,WAAWsB,IAAI,iEAAiEC,IAAI,KAG9F,qBACCH,QAAS,kBAAMP,EAAQQ,KAAK,aAC7BrB,UAAU,aAAasB,IAAI,+GAA+GC,IAAI,W,MCiB/IC,MA9Cf,YAAuD,IAAxCnB,EAAuC,EAAvCA,MAAOoB,EAAgC,EAAhCA,SAAgC,IAAtBC,kBAAsB,SAElD,EAA8B1C,mBAAS,IAAvC,mBAAQ2C,EAAR,KAAgBC,EAAhB,KAIA,EAA+B5C,oBAAS,GAAxC,mBAAiB6C,GAAjB,WAYA,OAVA1C,qBAAU,WAAM,4CACZ,4BAAAC,EAAA,sEAC0BrB,EAAMsB,IAAIoC,GADpC,cACUnC,EADV,OAEIsC,EAAUtC,EAAQC,KAAKC,SAF3B,kBAGWF,GAHX,4CADY,uBAAC,WAAD,wBAOZO,KACD,CAAC4B,IAGA,sBAAKzB,UAAU,MAAf,UACI,6BAAKK,IACL,qBAAKL,UAAU,cAAf,SACK2B,EAAOG,KAAI,SAAC7C,GAAD,OACNyC,GAAczC,EAAM8C,cACpBL,GAAczC,EAAMkB,gBAElB,qBAEAiB,QAAS,kBAAMS,GAAW,IAExB7B,UAAS,qBAAgB0B,GAAc,mBAEvCJ,IAAG,UA5BR,wCA4BQ,OACDI,EAAazC,EAAM8C,YAAc9C,EAAMkB,eACnCoB,IAAKtC,EAAMqB,MAHZrB,EAAM+C,aCgBtBC,MA5Cf,WACI,OACI,sBAAKjC,UAAU,aAAf,UACI,cAAC,EAAD,IACA,cAAC,EAAD,IAEA,cAAC,EAAD,CACIK,MAAM,oBACNoB,SAAUtD,EAASE,sBACnBqD,YAAU,IAEd,cAAC,EAAD,CACIrB,MAAM,eACNoB,SAAUtD,EAASC,gBAEvB,cAAC,EAAD,CACIiC,MAAM,YACNoB,SAAUtD,EAASG,gBAEvB,cAAC,EAAD,CACI+B,MAAM,gBACNoB,SAAUtD,EAASI,oBAEvB,cAAC,EAAD,CACI8B,MAAM,gBACNoB,SAAUtD,EAASK,oBAEvB,cAAC,EAAD,CACI6B,MAAM,gBACNoB,SAAUtD,EAASM,oBAEvB,cAAC,EAAD,CACI4B,MAAM,iBACNoB,SAAUtD,EAASO,qBAEvB,cAAC,EAAD,CACI2B,MAAM,gBACNoB,SAAUtD,EAASQ,yB,wBC5B7BuD,GAFcC,IAASC,cAVN,CACrBC,OAAQ,0CACRC,WAAY,mCACZC,UAAW,mBACXC,cAAe,+BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAIMC,YACVT,IAASD,Q,MC6BPW,MAzCf,WAEI,IAAMC,EAAWC,iBAAO,MAClBC,EAAcD,iBAAO,MAyB3B,OACI,qBAAK/C,UAAU,eAAf,SACI,iCACI,yCACA,uBAAOiD,IAAKH,EAAUI,KAAK,QAAQC,YAAY,UAC/C,uBAAOF,IAAKD,EAAaE,KAAK,WAAWC,YAAY,aACrD,wBAAQ/B,QAhBL,SAACgC,GACZA,EAAEC,iBACFnB,EAAKoB,2BACDR,EAASS,QAAQC,MACjBR,EAAYO,QAAQC,OACtBC,MAAK,SAACC,GACJ5D,QAAQC,IAAI2D,MACbC,OAAM,SAACC,GAAD,OAAWC,MAAMD,EAAME,YASCZ,KAAK,SAA9B,qBACA,+BAAI,sBAAMlD,UAAU,oBAAhB,6BAAJ,IAA+D,sBAAMA,UAAU,oBAAoBoB,QA7B9F,SAACgC,GACdA,EAAEC,iBACFnB,EAAK6B,+BACDjB,EAASS,QAAQC,MACjBR,EAAYO,QAAQC,OACtBC,MAAK,SAACC,GACJ5D,QAAQC,IAAI2D,MACbC,OAAM,SAACC,GACNC,MAAMD,EAAMI,aAqBuD,oCCKhEC,MAxCf,WAEI,MAA4BjF,oBAAS,GAArC,mBAAOkF,EAAP,KAAeC,EAAf,KAEA,OACI,sBAAKnE,UAAU,cAAf,UACI,sBAAKA,UAAU,yBAAf,UACI,qBAAKA,UAAU,mBAAmBsB,IAAI,kEAAkEC,IAAI,KAC5G,wBAAQH,QAAS,kBAAM+C,GAAU,IAAOnE,UAAU,qBAAlD,qBAEA,qBAAKA,UAAU,4BAGnB,qBAAKA,UAAU,mBAAf,SAEKkE,EACG,cAAC,EAAD,IAEA,qCACA,wEACA,oEACA,wGAEA,qBAAKlE,UAAU,oBAAf,SACI,iCACI,uBAAOkD,KAAK,QAAQC,YAAY,kBAChC,wBACA/B,QAAS,kBAAM+C,GAAU,IACzBnE,UAAU,yBAFV,uC,gBC3BfoE,EAAYC,YAAY,CACnC/D,KAAM,OACNgE,aAAc,CACZC,KAAM,MAGRC,SAAU,CACRC,MAAO,SAACC,EAAOC,GACbD,EAAMH,KAAOI,EAAOC,SAEtBC,OAAQ,SAACH,GACPA,EAAMH,KAAO,SAMZ,EAA0BH,EAAUU,QAA5BL,EAAR,EAAQA,MAAOI,EAAf,EAAeA,OAETE,EAAa,SAACL,GAAD,OAAWA,EAAMH,KAAKA,MAIjCH,IAAf,Q,MCOeY,MA1Bf,WAEI,IAAMT,EAAOU,YAAYF,GAEzB,OACI,sBAAK/E,UAAU,gBAAf,UACI,cAAC,EAAD,IACA,sBAAKA,UAAU,qBAAf,UACI,8CACA,sBAAKA,UAAU,qBAAf,UACI,qBAAKsB,IAAI,+GAA+GC,IAAI,KAC5H,sBAAKvB,UAAU,wBAAf,UACI,6BAAKuE,EAAKW,QACV,sBAAKlF,UAAU,sBAAf,UACI,uCACA,wBACAoB,QAAS,kBAAMc,EAAKiD,WACpBnF,UAAU,wBAFV,sCC+BboF,MA3Cf,WAEE,IAAMb,EAAOU,YAAYF,GACnBM,EAAWC,cAiBjB,OAfAnG,qBAAU,WAYR,OAXoB+C,EAAKqD,oBAAmB,SAACC,GAEzCH,EADCG,EACQf,EAAM,CACbgB,IAAKD,EAASC,IACdP,MAAOM,EAASN,QAGTL,UAKZ,CAACQ,IAGF,qBAAKrF,UAAU,MAAf,SACE,cAAC,IAAD,UACIuE,EAGA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOmB,KAAK,WAAZ,SACE,cAAC,EAAD,MAEJ,cAAC,IAAD,CAAOA,KAAK,IAAZ,SACE,cAAC,EAAD,SAPF,cAAC,EAAD,SC/BGC,EAAQC,YAAe,CAClCC,QAAS,CACPtB,KAAMuB,KCOUC,QACW,cAA7B/E,OAAOgF,SAASC,UAEe,UAA7BjF,OAAOgF,SAASC,UAEhBjF,OAAOgF,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUV,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJW,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjD,MAAK,SAACkD,GAClCA,EAAaC,kB","file":"static/js/main.42b92cdd.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst instance = axios.create({\n    baseURL: \"https://api.themoviedb.org/3\"\n});\n\nexport default instance;","\nconst API_KEY = \"15f780fed0a6f54f1b996190813e1d78\";\n\nconst requests = {\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\n    \n    fetchTrailers: `/videos?api_key=${API_KEY}`\n};\n\nexport default requests;","import axios from './axios';\nimport React, { useEffect, useState } from 'react'\nimport \"./Banner.css\"\nimport requests from './Requests';\n\nfunction Banner() {\n\n    const [ movie, setMovie ] = useState([]);\n\n    useEffect(() => {\n        async function fetchData() {\n            const request = await axios.get(requests.fetchNetflixOriginals);\n            setMovie(\n                request.data.results[\n                    Math.floor(Math.random() * request.data.results.length - 1)\n                ]\n            );\n            return request;\n        }\n\n        fetchData();\n    }, [])\n\n    console.log(movie);\n\n    function truncate(string, n) {\n        return string?.length > n ? string.substr(0, n-1) + '....' : string;\n    }\n\n    return (\n        <header className=\"banner\" style={{\n            backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\n            backgroundPosition: \"center center\",\n        }}>\n            <div className=\"banner_contents\">\n                <h1 className=\"banner_title\">\n                    {movie?.title || movie?.name || movie?.original_name}\n                </h1>\n                <div className=\"banner_buttons\">\n                    <button className=\"banner_button\">Play</button>\n                    <button className=\"banner_button\">My List</button>\n                </div>\n                <h1 className=\"banner_description\">{truncate(movie?.overview , 150)}</h1>\n            </div>\n            <div className=\"banner--fadeBottom\" /> {/*to fade the bottom of the banner*/}\n        </header>\n    )\n}\n\nexport default Banner\n","import React, { useEffect, useState } from 'react'\nimport { useHistory } from 'react-router';\nimport \"./Nav.css\"\n\nfunction Nav() {\n\n    const [show, handleShow] = useState(false);\n    const history = useHistory()\n    \n    const transitionNavBar = () => {\n        if(window.scrollY > 100) {\n            handleShow(true);\n        }else {\n            handleShow(false);\n        }\n    }\n\n    useEffect(() => {\n        window.addEventListener(\"scroll\", transitionNavBar);\n        return () => window.removeEventListener(\"scroll\", transitionNavBar);\n    }, []);\n\n    return (\n        <div className={`nav ${show && \"nav_black\"}`}>\n\n            <div className=\"nav_contents\">\n                <img \n                onClick={() => history.push(\"/\")}\n                className=\"nav_logo\" src=\"http://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\" alt=\"\" />\n\n\n                <img \n                 onClick={() => history.push(\"/profile\")}\n                className=\"nav_avatar\" src=\"https://cdn3.vectorstock.com/i/1000x1000/38/17/male-face-avatar-logo-template-pictograph-vector-11333817.jpg\" alt=\"\" />\n            </div>\n            \n        </div>\n    )\n}\n\nexport default Nav\n","import axios from './axios';\nimport React, { useEffect, useState } from 'react'\nimport \"./Row.css\"\n\nfunction Row({ title, fetchUrl, isLargeRow = false }) {\n\n    const [ movies, setMovies ] = useState([]);\n\n    const base_url = \"https://image.tmdb.org/t/p/original/\";\n\n    const [ trailer, setTrailer] = useState(false);\n\n    useEffect(() => {\n        async function fetchData() {\n            const request = await axios.get(fetchUrl)\n            setMovies(request.data.results);\n            return request;\n        }\n\n        fetchData();\n    }, [fetchUrl])\n\n    return (\n        <div className=\"row\"> \n            <h2>{title}</h2>\n            <div className=\"row_posters\">\n                {movies.map((movie) => (\n                    ((isLargeRow && movie.poster_path) ||\n                    (!isLargeRow && movie.backdrop_path)) && (\n                        \n                        <img \n\n                        onClick={() => setTrailer(true)}\n\n                          className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\n                          key={movie.id}\n                          src={`${base_url}${\n                            isLargeRow ? movie.poster_path : movie.backdrop_path\n                            }`} alt={movie.name} />\n                    \n                        \n                    )\n                \n                ))}\n            </div>\n            \n        </div>\n    )\n}\n\nexport default Row\n","import React from 'react'\nimport Banner from '../Banner'\nimport \"./HomeScreen.css\"\nimport Nav from '../Nav'\nimport requests from '../Requests'\nimport Row from '../Row'\n\nfunction HomeScreen() {\n    return (\n        <div className=\"homeScreen\">\n            <Nav />\n            <Banner />\n\n            <Row \n                title='NETFLIX ORIGINALS'\n                fetchUrl={requests.fetchNetflixOriginals}\n                isLargeRow\n            />\n            <Row \n                title='Trending Now'\n                fetchUrl={requests.fetchTrending}\n            />\n            <Row \n                title='Top Rated'\n                fetchUrl={requests.fetchTopRated}\n            />\n            <Row \n                title='Action Movies'\n                fetchUrl={requests.fetchActionMovies}\n            />\n            <Row \n                title='Comedy Movies'\n                fetchUrl={requests.fetchComedyMovies}\n            />\n            <Row \n                title='Horror Movies'\n                fetchUrl={requests.fetchHorrorMovies}\n            />\n            <Row \n                title='Romance Movies'\n                fetchUrl={requests.fetchRomanceMovies}\n            />\n            <Row \n                title='Documentaries'\n                fetchUrl={requests.fetchDocumentaries}\n            />\n          \n        </div>\n    )\n}\n\nexport default HomeScreen\n","// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nimport firebase from 'firebase';\n\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBQS161jHOKva4zI6BauVKaLcvpWHeZi7M\",\n  authDomain: \"netflix-clone-kp.firebaseapp.com\",\n  projectId: \"netflix-clone-kp\",\n  storageBucket: \"netflix-clone-kp.appspot.com\",\n  messagingSenderId: \"532779489283\",\n  appId: \"1:532779489283:web:d2d2cda4ac841087331636\",\n  measurementId: \"G-95BXM61RKL\",\n};\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\nconst db = firebaseApp.firestore();\nconst auth = firebase.auth();\n\nexport { auth };\nexport default db;\n","import React, { useRef } from 'react'\nimport { auth } from '../firebase';\nimport \"./SignupScreen.css\"\n\nfunction SignupScreen() {\n\n    const emailRef = useRef(null);\n    const passwordRef = useRef(null);\n\n\n    const register = (e) => {\n        e.preventDefault();\n        auth.createUserWithEmailAndPassword(\n            emailRef.current.value,\n            passwordRef.current.value\n        ).then((authUser) => {\n            console.log(authUser);\n        }).catch((error) =>{\n            alert(error.message)\n        });\n    };\n\n    const signIn = (e) => {\n        e.preventDefault();\n        auth.signInWithEmailAndPassword(\n            emailRef.current.value,\n            passwordRef.current.value\n        ).then((authUser) => {\n            console.log(authUser)\n        }).catch((error) => alert(error.mesage)); \n    }\n\n    return (\n        <div className=\"signupScreen\">\n            <form>\n                <h1>Sign In</h1>\n                <input ref={emailRef} type=\"email\" placeholder=\"Email\" />\n                <input ref={passwordRef} type=\"password\" placeholder=\"Password\" />\n                <button onClick={signIn} type=\"submit\">Sign In</button>\n                <h4><span className=\"signupScreen_gray\">New to Netflix?</span> <span className=\"signupScreen_link\" onClick={register}> Sign Up Now.</span></h4>\n            </form>\n        </div>\n    )\n}\n\nexport default SignupScreen\n","import React, { useState } from 'react'\nimport \"./LoginScreen.css\"\nimport SignupScreen from './SignupScreen';\n\nfunction LoginScreen() {\n\n    const [signIn, setSignIn] = useState(false);\n\n    return (\n        <div className=\"loginScreen\">\n            <div className=\"loginScreen_background\">\n                <img className=\"loginScreen_logo\" src=\"https://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\" alt=\"\" />\n                <button onClick={() => setSignIn(true)} className=\"loginScreen_button\">Sign In</button>\n\n                <div className=\"loginScreen_gradient\" />\n            </div>\n\n            <div className=\"loginScreen_body\">\n\n                {signIn ? (\n                    <SignupScreen />\n                ) : (\n                    <>\n                    <h1>Ultimate films, TV programes and more.</h1>\n                    <h2>Watch anywhere. Cancel at any time</h2>\n                    <h3>Ready to watch? Enter your email to create or restart your membership.</h3>\n\n                    <div className=\"loginScreen_input\">\n                        <form>\n                            <input type=\"email\" placeholder=\"Email Address\" />\n                            <button \n                            onClick={() => setSignIn(true)}\n                            className=\"loginScreen_getStarted\">GET STARTED</button>\n                        </form>\n                    </div>\n                </>\n                )}\n\n                \n            </div>\n        </div>\n    )\n}\n\nexport default LoginScreen\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\n\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState: {\n    user: null,\n  },\n\n  reducers: {\n    login: (state, action) => {\n      state.user = action.payload;\n    },\n    logout: (state) => {\n      state.user = null;\n    }\n  },\n\n});\n\nexport const { login, logout } = userSlice.actions;\n\nexport const selectUser = (state) => state.user.user;\n\n\n\nexport default userSlice.reducer;\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { selectUser } from '../features/userSlice'\nimport { auth } from '../firebase'\nimport Nav from '../Nav'\nimport \"./ProfileScreen.css\"\n\nfunction ProfileScreen() {\n\n    const user = useSelector(selectUser)\n\n    return (\n        <div className=\"profileScreen\">\n            <Nav />\n            <div className=\"profileScreen_body\">\n                <h1>Edit Profile</h1>\n                <div className=\"profileScreen_info\">\n                    <img src=\"https://cdn3.vectorstock.com/i/1000x1000/38/17/male-face-avatar-logo-template-pictograph-vector-11333817.jpg\" alt=\"\" />\n                    <div className=\"profileScreen_details\">\n                        <h2>{user.email}</h2>\n                        <div className=\"profileScreen_plans\">\n                            <h3>Plans</h3>\n                            <button \n                            onClick={() => auth.signOut()}\n                            className=\"profileScreen_signOut\">Sign Out</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default ProfileScreen\n","import React, { useEffect } from 'react';\nimport './App.css';\nimport HomeScreen from './screens/HomeScreen';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport LoginScreen from './screens/LoginScreen';\nimport { auth } from './firebase';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { login, logout, selectUser } from './features/userSlice';\nimport ProfileScreen from './screens/ProfileScreen';\n\nfunction App() {\n\n  const user = useSelector(selectUser);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged((userAuth) => {\n      if(userAuth) {\n        dispatch(login({\n          uid: userAuth.uid,\n          email: userAuth.email,\n        }));\n      }else{\n        dispatch(logout());\n      }\n    });\n\n    return unsubscribe;\n  }, [dispatch])\n\n  return (\n    <div className=\"app\">\n      <Router>\n        {!user ? (\n          <LoginScreen />\n        ) : (\n          <Switch>\n            <Route path=\"/profile\">\n              <ProfileScreen />\n            </Route>\n          <Route path=\"/\">\n            <HomeScreen />\n          </Route>\n        </Switch>\n\n        )}\n        \n      </Router>\n\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport userReducer from '../features/userSlice';\n\nexport const store = configureStore({\n  reducer: {\n    user: userReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}